/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.vinpol.spacetraders.sdk.models;

import java.util.Objects;
import java.util.Arrays;


import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Results of a transaction with a shipyard.
 */

public class ShipyardTransaction {
  public static final String SERIALIZED_NAME_WAYPOINT_SYMBOL = "waypointSymbol";
  
  private String waypointSymbol;

  public static final String SERIALIZED_NAME_SHIP_SYMBOL = "shipSymbol";
  
  private String shipSymbol;

  public static final String SERIALIZED_NAME_SHIP_TYPE = "shipType";
  
  private String shipType;

  public static final String SERIALIZED_NAME_PRICE = "price";
  
  private Integer price;

  public static final String SERIALIZED_NAME_AGENT_SYMBOL = "agentSymbol";
  
  private String agentSymbol;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  
  private OffsetDateTime timestamp;

  public ShipyardTransaction() {
  }

  public ShipyardTransaction waypointSymbol(String waypointSymbol) {

    this.waypointSymbol = waypointSymbol;
    return this;
  }

   /**
   * The symbol of the waypoint.
   * @return waypointSymbol
  **/
  

  public String getWaypointSymbol() {
    return waypointSymbol;
  }


  public void setWaypointSymbol(String waypointSymbol) {
    this.waypointSymbol = waypointSymbol;
  }


  public ShipyardTransaction shipSymbol(String shipSymbol) {

    this.shipSymbol = shipSymbol;
    return this;
  }

   /**
   * The symbol of the ship that was the subject of the transaction.
   * @return shipSymbol
   * @deprecated
  **/
  @Deprecated
  

  public String getShipSymbol() {
    return shipSymbol;
  }


  public void setShipSymbol(String shipSymbol) {
    this.shipSymbol = shipSymbol;
  }


  public ShipyardTransaction shipType(String shipType) {

    this.shipType = shipType;
    return this;
  }

   /**
   * The symbol of the ship that was the subject of the transaction.
   * @return shipType
  **/
  

  public String getShipType() {
    return shipType;
  }


  public void setShipType(String shipType) {
    this.shipType = shipType;
  }


  public ShipyardTransaction price(Integer price) {

    this.price = price;
    return this;
  }

   /**
   * The price of the transaction.
   * minimum: 0
   * @return price
  **/
  

  public Integer getPrice() {
    return price;
  }


  public void setPrice(Integer price) {
    this.price = price;
  }


  public ShipyardTransaction agentSymbol(String agentSymbol) {

    this.agentSymbol = agentSymbol;
    return this;
  }

   /**
   * The symbol of the agent that made the transaction.
   * @return agentSymbol
  **/
  

  public String getAgentSymbol() {
    return agentSymbol;
  }


  public void setAgentSymbol(String agentSymbol) {
    this.agentSymbol = agentSymbol;
  }


  public ShipyardTransaction timestamp(OffsetDateTime timestamp) {

    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp of the transaction.
   * @return timestamp
  **/
  

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipyardTransaction shipyardTransaction = (ShipyardTransaction) o;
    return Objects.equals(this.waypointSymbol, shipyardTransaction.waypointSymbol) &&
        Objects.equals(this.shipSymbol, shipyardTransaction.shipSymbol) &&
        Objects.equals(this.shipType, shipyardTransaction.shipType) &&
        Objects.equals(this.price, shipyardTransaction.price) &&
        Objects.equals(this.agentSymbol, shipyardTransaction.agentSymbol) &&
        Objects.equals(this.timestamp, shipyardTransaction.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(waypointSymbol, shipSymbol, shipType, price, agentSymbol, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipyardTransaction {\n");
    sb.append("    waypointSymbol: ").append(toIndentedString(waypointSymbol)).append("\n");
    sb.append("    shipSymbol: ").append(toIndentedString(shipSymbol)).append("\n");
    sb.append("    shipType: ").append(toIndentedString(shipType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    agentSymbol: ").append(toIndentedString(agentSymbol)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

