/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.vinpol.spacetraders.sdk.models;

import java.util.Objects;
import java.util.Arrays;


import com.fasterxml.jackson.annotation.JsonValue;
import dev.vinpol.spacetraders.sdk.models.ShipRequirements;
import java.io.IOException;

/**
 * The reactor of the ship. The reactor is responsible for powering the ship&#39;s systems and weapons.
 */

public class ShipReactor {
  /**
   * Symbol of the reactor.
   */

  public enum SymbolEnum {
    SOLAR_I("REACTOR_SOLAR_I"),

    FUSION_I("REACTOR_FUSION_I"),

    FISSION_I("REACTOR_FISSION_I"),

    CHEMICAL_I("REACTOR_CHEMICAL_I"),

    ANTIMATTER_I("REACTOR_ANTIMATTER_I");

    private String value;

    SymbolEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SymbolEnum fromValue(String value) {
      for (SymbolEnum b : SymbolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";

  private SymbolEnum symbol;

  public static final String SERIALIZED_NAME_NAME = "name";

  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";

  private String description;

  public static final String SERIALIZED_NAME_CONDITION = "condition";

  private Integer condition;

  public static final String SERIALIZED_NAME_POWER_OUTPUT = "powerOutput";

  private Integer powerOutput;

  public static final String SERIALIZED_NAME_REQUIREMENTS = "requirements";

  private ShipRequirements requirements;

  public ShipReactor() {
  }

  public ShipReactor symbol(SymbolEnum symbol) {

    this.symbol = symbol;
    return this;
  }

   /**
   * Symbol of the reactor.
   * @return symbol
  **/


  public SymbolEnum getSymbol() {
    return symbol;
  }


  public void setSymbol(SymbolEnum symbol) {
    this.symbol = symbol;
  }


  public ShipReactor name(String name) {

    this.name = name;
    return this;
  }

   /**
   * Name of the reactor.
   * @return name
  **/


  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ShipReactor description(String description) {

    this.description = description;
    return this;
  }

   /**
   * Description of the reactor.
   * @return description
  **/


  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ShipReactor condition(Integer condition) {

    this.condition = condition;
    return this;
  }

   /**
   * Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
   * minimum: 0
   * maximum: 100
   * @return condition
  **/


  public Integer getCondition() {
    return condition;
  }


  public void setCondition(Integer condition) {
    this.condition = condition;
  }


  public ShipReactor powerOutput(Integer powerOutput) {

    this.powerOutput = powerOutput;
    return this;
  }

   /**
   * The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship&#39;s power.
   * minimum: 1
   * @return powerOutput
  **/


  public Integer getPowerOutput() {
    return powerOutput;
  }


  public void setPowerOutput(Integer powerOutput) {
    this.powerOutput = powerOutput;
  }


  public ShipReactor requirements(ShipRequirements requirements) {

    this.requirements = requirements;
    return this;
  }

   /**
   * Get requirements
   * @return requirements
  **/


  public ShipRequirements getRequirements() {
    return requirements;
  }


  public void setRequirements(ShipRequirements requirements) {
    this.requirements = requirements;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipReactor shipReactor = (ShipReactor) o;
    return Objects.equals(this.symbol, shipReactor.symbol) &&
        Objects.equals(this.name, shipReactor.name) &&
        Objects.equals(this.description, shipReactor.description) &&
        Objects.equals(this.condition, shipReactor.condition) &&
        Objects.equals(this.powerOutput, shipReactor.powerOutput) &&
        Objects.equals(this.requirements, shipReactor.requirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, name, description, condition, powerOutput, requirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipReactor {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    powerOutput: ").append(toIndentedString(powerOutput)).append("\n");
    sb.append("    requirements: ").append(toIndentedString(requirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

