/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.vinpol.spacetraders.sdk.models;

import java.util.Objects;
import java.util.Arrays;


import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The chart of a system or waypoint, which makes the location visible to other agents.
 */

public class Chart {
  public static final String SERIALIZED_NAME_WAYPOINT_SYMBOL = "waypointSymbol";

  private String waypointSymbol;

  public static final String SERIALIZED_NAME_SUBMITTED_BY = "submittedBy";

  private String submittedBy;

  public static final String SERIALIZED_NAME_SUBMITTED_ON = "submittedOn";

  private OffsetDateTime submittedOn;

  public Chart() {
  }

  public Chart waypointSymbol(String waypointSymbol) {

    this.waypointSymbol = waypointSymbol;
    return this;
  }

   /**
   * The symbol of the waypoint.
   * @return waypointSymbol
  **/
  

  public String getWaypointSymbol() {
    return waypointSymbol;
  }


  public void setWaypointSymbol(String waypointSymbol) {
    this.waypointSymbol = waypointSymbol;
  }


  public Chart submittedBy(String submittedBy) {

    this.submittedBy = submittedBy;
    return this;
  }

   /**
   * The agent that submitted the chart for this waypoint.
   * @return submittedBy
  **/
  

  public String getSubmittedBy() {
    return submittedBy;
  }


  public void setSubmittedBy(String submittedBy) {
    this.submittedBy = submittedBy;
  }


  public Chart submittedOn(OffsetDateTime submittedOn) {

    this.submittedOn = submittedOn;
    return this;
  }

   /**
   * The time the chart for this waypoint was submitted.
   * @return submittedOn
  **/
  

  public OffsetDateTime getSubmittedOn() {
    return submittedOn;
  }


  public void setSubmittedOn(OffsetDateTime submittedOn) {
    this.submittedOn = submittedOn;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chart chart = (Chart) o;
    return Objects.equals(this.waypointSymbol, chart.waypointSymbol) &&
        Objects.equals(this.submittedBy, chart.submittedBy) &&
        Objects.equals(this.submittedOn, chart.submittedOn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(waypointSymbol, submittedBy, submittedOn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chart {\n");
    sb.append("    waypointSymbol: ").append(toIndentedString(waypointSymbol)).append("\n");
    sb.append("    submittedBy: ").append(toIndentedString(submittedBy)).append("\n");
    sb.append("    submittedOn: ").append(toIndentedString(submittedOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

