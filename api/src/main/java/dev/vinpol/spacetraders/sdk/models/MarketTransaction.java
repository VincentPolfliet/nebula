/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.vinpol.spacetraders.sdk.models;

import java.util.Objects;
import java.util.Arrays;


import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Result of a transaction with a market.
 */

public class MarketTransaction {
  public static final String SERIALIZED_NAME_WAYPOINT_SYMBOL = "waypointSymbol";

  private String waypointSymbol;

  public static final String SERIALIZED_NAME_SHIP_SYMBOL = "shipSymbol";

  private String shipSymbol;

  public static final String SERIALIZED_NAME_TRADE_SYMBOL = "tradeSymbol";

  private String tradeSymbol;

  /**
   * The type of transaction.
   */

  public enum TypeEnum {
    PURCHASE("PURCHASE"),

    SELL("SELL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }


  }

  public static final String SERIALIZED_NAME_TYPE = "type";

  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNITS = "units";

  private Integer units;

  public static final String SERIALIZED_NAME_PRICE_PER_UNIT = "pricePerUnit";

  private Integer pricePerUnit;

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "totalPrice";

  private Integer totalPrice;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";

  private OffsetDateTime timestamp;

  public MarketTransaction() {
  }

  public MarketTransaction waypointSymbol(String waypointSymbol) {

    this.waypointSymbol = waypointSymbol;
    return this;
  }

   /**
   * The symbol of the waypoint.
   * @return waypointSymbol
  **/


  public String getWaypointSymbol() {
    return waypointSymbol;
  }


  public void setWaypointSymbol(String waypointSymbol) {
    this.waypointSymbol = waypointSymbol;
  }


  public MarketTransaction shipSymbol(String shipSymbol) {

    this.shipSymbol = shipSymbol;
    return this;
  }

   /**
   * The symbol of the ship that made the transaction.
   * @return shipSymbol
  **/


  public String getShipSymbol() {
    return shipSymbol;
  }


  public void setShipSymbol(String shipSymbol) {
    this.shipSymbol = shipSymbol;
  }


  public MarketTransaction tradeSymbol(String tradeSymbol) {

    this.tradeSymbol = tradeSymbol;
    return this;
  }

   /**
   * The symbol of the trade good.
   * @return tradeSymbol
  **/


  public String getTradeSymbol() {
    return tradeSymbol;
  }


  public void setTradeSymbol(String tradeSymbol) {
    this.tradeSymbol = tradeSymbol;
  }


  public MarketTransaction type(TypeEnum type) {

    this.type = type;
    return this;
  }

   /**
   * The type of transaction.
   * @return type
  **/


  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MarketTransaction units(Integer units) {

    this.units = units;
    return this;
  }

   /**
   * The number of units of the transaction.
   * minimum: 0
   * @return units
  **/


  public Integer getUnits() {
    return units;
  }


  public void setUnits(Integer units) {
    this.units = units;
  }


  public MarketTransaction pricePerUnit(Integer pricePerUnit) {

    this.pricePerUnit = pricePerUnit;
    return this;
  }

   /**
   * The price per unit of the transaction.
   * minimum: 0
   * @return pricePerUnit
  **/


  public Integer getPricePerUnit() {
    return pricePerUnit;
  }


  public void setPricePerUnit(Integer pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
  }


  public MarketTransaction totalPrice(Integer totalPrice) {

    this.totalPrice = totalPrice;
    return this;
  }

   /**
   * The total price of the transaction.
   * minimum: 0
   * @return totalPrice
  **/


  public Integer getTotalPrice() {
    return totalPrice;
  }


  public void setTotalPrice(Integer totalPrice) {
    this.totalPrice = totalPrice;
  }


  public MarketTransaction timestamp(OffsetDateTime timestamp) {

    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp of the transaction.
   * @return timestamp
  **/


  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketTransaction marketTransaction = (MarketTransaction) o;
    return Objects.equals(this.waypointSymbol, marketTransaction.waypointSymbol) &&
        Objects.equals(this.shipSymbol, marketTransaction.shipSymbol) &&
        Objects.equals(this.tradeSymbol, marketTransaction.tradeSymbol) &&
        Objects.equals(this.type, marketTransaction.type) &&
        Objects.equals(this.units, marketTransaction.units) &&
        Objects.equals(this.pricePerUnit, marketTransaction.pricePerUnit) &&
        Objects.equals(this.totalPrice, marketTransaction.totalPrice) &&
        Objects.equals(this.timestamp, marketTransaction.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(waypointSymbol, shipSymbol, tradeSymbol, type, units, pricePerUnit, totalPrice, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketTransaction {\n");
    sb.append("    waypointSymbol: ").append(toIndentedString(waypointSymbol)).append("\n");
    sb.append("    shipSymbol: ").append(toIndentedString(shipSymbol)).append("\n");
    sb.append("    tradeSymbol: ").append(toIndentedString(tradeSymbol)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    pricePerUnit: ").append(toIndentedString(pricePerUnit)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

